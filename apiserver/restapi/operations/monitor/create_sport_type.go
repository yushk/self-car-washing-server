// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	v1 "github.com/yushk/sport_backend/apiserver/v1"
)

// CreateSportTypeHandlerFunc turns a function with the right signature into a create sport type handler
type CreateSportTypeHandlerFunc func(CreateSportTypeParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSportTypeHandlerFunc) Handle(params CreateSportTypeParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateSportTypeHandler interface for that can handle valid create sport type params
type CreateSportTypeHandler interface {
	Handle(CreateSportTypeParams, *v1.Principal) middleware.Responder
}

// NewCreateSportType creates a new http.Handler for the create sport type operation
func NewCreateSportType(ctx *middleware.Context, handler CreateSportTypeHandler) *CreateSportType {
	return &CreateSportType{Context: ctx, Handler: handler}
}

/* CreateSportType swagger:route POST /v1/sportType monitor createSportType

创建运动类别

创建运动类别

*/
type CreateSportType struct {
	Context *middleware.Context
	Handler CreateSportTypeHandler
}

func (o *CreateSportType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateSportTypeParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
