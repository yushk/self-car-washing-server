// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvaluateInfo 评价信息列表
//
// swagger:model EvaluateInfo
type EvaluateInfo struct {

	// 评价体系列表
	Evaluates []*Evaluate `json:"Evaluates"`

	// 作业id
	HomeWorkID string `json:"home_work_id"`

	// 评价信息id
	ID string `json:"id"`

	// 评价人姓名(老师或学生)
	Name string `json:"name"`

	// 评价备注
	Note string `json:"note"`

	// 提交作业id
	SolutionID string `json:"solution_id"`

	// 评价人id(老师或学生)
	UserID string `json:"user_id"`
}

// Validate validates this evaluate info
func (m *EvaluateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvaluates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluateInfo) validateEvaluates(formats strfmt.Registry) error {
	if swag.IsZero(m.Evaluates) { // not required
		return nil
	}

	for i := 0; i < len(m.Evaluates); i++ {
		if swag.IsZero(m.Evaluates[i]) { // not required
			continue
		}

		if m.Evaluates[i] != nil {
			if err := m.Evaluates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evaluates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this evaluate info based on the context it is used
func (m *EvaluateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvaluates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluateInfo) contextValidateEvaluates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Evaluates); i++ {

		if m.Evaluates[i] != nil {
			if err := m.Evaluates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evaluates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluateInfo) UnmarshalBinary(b []byte) error {
	var res EvaluateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
