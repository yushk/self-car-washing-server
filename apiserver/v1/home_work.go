// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HomeWork 作业提交信息
//
// swagger:model HomeWork
type HomeWork struct {

	// 二维码
	QRCode string `json:"QR_code"`

	// 作业描述
	Desc string `json:"desc"`

	// 作业截至时间
	EndTime int64 `json:"end_time"`

	// id
	// Read Only: true
	ID string `json:"id"`

	// 需要提交的人数
	Number int32 `json:"number"`

	// 学生提交作业信息
	SolutionsInfo []*Solution `json:"solutions_info"`

	// 学生提交作业信息id
	SolutionsInfoID []string `json:"solutions_info_id"`

	// 运动项目
	SportItem *SportItem `json:"sport_item,omitempty"`

	// 运动项目id
	SportItemID string `json:"sport_item_id"`

	// 作业发布时间
	StartTime int64 `json:"start_time"`

	// 发布作业的老师
	Teacher string `json:"teacher"`

	// 课程名称
	Title string `json:"title"`
}

// Validate validates this home work
func (m *HomeWork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSolutionsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSportItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeWork) validateSolutionsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SolutionsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.SolutionsInfo); i++ {
		if swag.IsZero(m.SolutionsInfo[i]) { // not required
			continue
		}

		if m.SolutionsInfo[i] != nil {
			if err := m.SolutionsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("solutions_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HomeWork) validateSportItem(formats strfmt.Registry) error {
	if swag.IsZero(m.SportItem) { // not required
		return nil
	}

	if m.SportItem != nil {
		if err := m.SportItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sport_item")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this home work based on the context it is used
func (m *HomeWork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSolutionsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSportItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeWork) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *HomeWork) contextValidateSolutionsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SolutionsInfo); i++ {

		if m.SolutionsInfo[i] != nil {
			if err := m.SolutionsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("solutions_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HomeWork) contextValidateSportItem(ctx context.Context, formats strfmt.Registry) error {

	if m.SportItem != nil {
		if err := m.SportItem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sport_item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HomeWork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HomeWork) UnmarshalBinary(b []byte) error {
	var res HomeWork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
