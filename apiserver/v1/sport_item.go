// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SportItem 运动项目信息
//
// swagger:model SportItem
type SportItem struct {

	// 评价体系列表
	Evaluates []*Evaluate `json:"Evaluates"`

	// 权限列表（老师）
	AuthUser []string `json:"auth_user"`

	// 文字描述
	Content string `json:"content"`

	// 创建时间
	CreateTime int64 `json:"create_time"`

	// 附件
	Files []*FileInfo `json:"files"`

	// id
	// Read Only: true
	ID string `json:"id"`

	// 名称
	Lable string `json:"lable"`

	// 图片文件
	Pics []*FileInfo `json:"pics"`

	// 运动类别id
	SportType string `json:"sport_type"`

	// 责任人 可能是多个老师
	Teachers []string `json:"teachers"`

	// 状态
	Type int32 `json:"type,omitempty"`

	// 更新时间
	UpdateTime int64 `json:"update_time"`

	// 创建人
	Userid string `json:"userid"`

	// 版本
	Version string `json:"version"`

	// 视频文件
	Videos []*FileInfo `json:"videos"`
}

// Validate validates this sport item
func (m *SportItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvaluates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SportItem) validateEvaluates(formats strfmt.Registry) error {
	if swag.IsZero(m.Evaluates) { // not required
		return nil
	}

	for i := 0; i < len(m.Evaluates); i++ {
		if swag.IsZero(m.Evaluates[i]) { // not required
			continue
		}

		if m.Evaluates[i] != nil {
			if err := m.Evaluates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evaluates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) validatePics(formats strfmt.Registry) error {
	if swag.IsZero(m.Pics) { // not required
		return nil
	}

	for i := 0; i < len(m.Pics); i++ {
		if swag.IsZero(m.Pics[i]) { // not required
			continue
		}

		if m.Pics[i] != nil {
			if err := m.Pics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) validateVideos(formats strfmt.Registry) error {
	if swag.IsZero(m.Videos) { // not required
		return nil
	}

	for i := 0; i < len(m.Videos); i++ {
		if swag.IsZero(m.Videos[i]) { // not required
			continue
		}

		if m.Videos[i] != nil {
			if err := m.Videos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("videos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sport item based on the context it is used
func (m *SportItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvaluates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SportItem) contextValidateEvaluates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Evaluates); i++ {

		if m.Evaluates[i] != nil {
			if err := m.Evaluates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evaluates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SportItem) contextValidatePics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pics); i++ {

		if m.Pics[i] != nil {
			if err := m.Pics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SportItem) contextValidateVideos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Videos); i++ {

		if m.Videos[i] != nil {
			if err := m.Videos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("videos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SportItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SportItem) UnmarshalBinary(b []byte) error {
	var res SportItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
