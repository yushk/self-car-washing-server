// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Solution 学生提作业提交信息
//
// swagger:model Solution
type Solution struct {

	// 提交作业时间
	CommitTime int64 `json:"commit_time"`

	// 内容（视频url）
	Content string `json:"content"`

	// 答案描述
	Desc string `json:"desc"`

	// 评价信息
	EvaluatesInfo []*EvaluateInfo `json:"evaluates_info"`

	// id
	// Read Only: true
	ID string `json:"id"`

	// 学生id
	StudentID string `json:"student_id"`

	// 学生姓名
	StudentName string `json:"student_name"`

	// 责任人和指导老师
	Teachers []string `json:"teachers"`

	// 标题
	Title string `json:"title"`

	// 作业id
	WorkID string `json:"work_id"`
}

// Validate validates this solution
func (m *Solution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvaluatesInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Solution) validateEvaluatesInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluatesInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.EvaluatesInfo); i++ {
		if swag.IsZero(m.EvaluatesInfo[i]) { // not required
			continue
		}

		if m.EvaluatesInfo[i] != nil {
			if err := m.EvaluatesInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("evaluates_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this solution based on the context it is used
func (m *Solution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvaluatesInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Solution) contextValidateEvaluatesInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EvaluatesInfo); i++ {

		if m.EvaluatesInfo[i] != nil {
			if err := m.EvaluatesInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("evaluates_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Solution) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Solution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Solution) UnmarshalBinary(b []byte) error {
	var res Solution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
