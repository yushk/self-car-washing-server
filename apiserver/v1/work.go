// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Work 作业提交信息
//
// swagger:model Work
type Work struct {

	// 作业内容
	Content string `json:"content"`

	// 课程id
	Course string `json:"course"`

	// 老师
	CourseCreater string `json:"course_creater"`

	// 课程标题
	CourseTitle string `json:"course_title"`

	// 创建时间
	Create int64 `json:"create"`

	// files
	Files []*FileInfo `json:"files"`

	// id
	// Read Only: true
	ID string `json:"id"`

	// 作业评价
	Note string `json:"note"`

	// note info
	NoteInfo []*NoteInfo `json:"note_info"`

	// 参与打分学生
	Noter []string `json:"noter"`

	// 成绩
	Score string `json:"score"`

	// 老师id
	Teacherid string `json:"teacherid"`

	// 提交状态
	// Enum: [0 1]
	Type int32 `json:"type"`

	// 更新时间
	Update int64 `json:"update"`

	// 提交人
	Userid string `json:"userid"`

	// 学生姓名
	Username string `json:"username"`
}

// Validate validates this work
func (m *Work) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoteInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Work) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Work) validateNoteInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NoteInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.NoteInfo); i++ {
		if swag.IsZero(m.NoteInfo[i]) { // not required
			continue
		}

		if m.NoteInfo[i] != nil {
			if err := m.NoteInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workTypeTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workTypeTypePropEnum = append(workTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *Work) validateTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, workTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Work) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this work based on the context it is used
func (m *Work) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoteInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Work) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Work) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Work) contextValidateNoteInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NoteInfo); i++ {

		if m.NoteInfo[i] != nil {
			if err := m.NoteInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Work) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Work) UnmarshalBinary(b []byte) error {
	var res Work
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
